package quicktfs.app;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;

import quicktfs.apiclients.contracts.ApiAccessException;

/**
 * Base implementation for asynchronous task that use ApiClients for the TFS Api.
 * @param <TParams> Type of the parameters of the asynchronous task.
 * @param <TResult> Type of the result of the asynchronous task.
 */
public abstract class AsyncApiClientTask<TParams, TResult> extends AsyncTask<TParams, Void, AsyncApiClientTask.ApiActionResult<TResult>> {
    private final Context context;

    /**
     * Creates an AsyncApiClientTask.
     * @param context Context of the task.
     */
    protected AsyncApiClientTask(Context context) {
        this.context = context;
    }

    @Override
    protected final ApiActionResult<TResult> doInBackground(TParams[] params) {
        // Derived tasks should define a model for the expected parameters
        // which is thereby limited to one model per execution.
        if (params == null || params.length != 1) {
            throw new IllegalArgumentException("params");
        }

        try {
            return new ApiActionResult<>(doApiAction(params[0]));
        }
        catch(ApiAccessException exception) {
            return new ApiActionResult<>(exception);
        }
    }

    @Override
    protected final void onPostExecute(ApiActionResult<TResult> result) {
        handleComplete();

        if (result.wasSuccessful()) {
            handleSuccess(result.getApiResult());
        }
        else {
            handleApiAccessException(result.getApiAccessException());
        }
    }

    /**
     * Handles exceptions that occur by accessing the TFS Api (e.g. network problems).
     * @param exception Exception that was thrown.
     */
    protected void handleApiAccessException(ApiAccessException exception) {
        Toast.makeText(context, context.getText(R.string.apiError) + exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();
    }


    /**
     * Should be overridden to define the actual operation with Api access.
     * @param params Parameter that was specified for the execution.
     * @return The result of the operation.
     */
    protected abstract TResult doApiAction(TParams params) throws ApiAccessException;

    /**
     * Should be overridden to define the handling of a successful operation.
     * @param result Result of the operation.
     */
    protected abstract void handleSuccess(TResult result);

    /**
     * Should be overridden to define the handling of completion of the operation.
     * Will be executed in success and failure cases.
     */
    protected void handleComplete() { }

    /**
     * Models the result of an action with Api access.
     * This can be either successful (with the result of the action)
     * or failed (without result, but an ApiAccessException).
     */
    static final class ApiActionResult<TResult> {
        private final ApiAccessException exception;
        private final TResult result;

        /**
         * Creates an ApiActionResult for a successful operation.
         * @param result The result was generated by the operation.
         */
        ApiActionResult(TResult result) {
            this.result = result;
            this.exception = null;
        }

        /**
         * Creates an ApiActionResult for a failed operation.
         * @param exception The exception that was thrown during the operation.
         */
        ApiActionResult(ApiAccessException exception) {
            this.result = null;
            this.exception = exception;
        }

        /**
         * Indicates if the operation was successful.
         * @return True, if the operation was successful; otherwise false.
         */
        boolean wasSuccessful() { return exception == null; }

        /**
         * Gets the result of a successful operation.
         * @return The result of the operation; or null if it was not successful.
         */
        TResult getApiResult() { return result; }

        /**
         * Gets the exception thrown by a failed operation.
         * @return The exception thrown by a failed operation; or null if it was successful.
         */
        ApiAccessException getApiAccessException() { return exception; }
    }
}